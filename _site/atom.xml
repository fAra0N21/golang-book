<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Golang-book</title>
 <link href="http://golang-book.geekdb.org/atom.xml" rel="self"/>
 <link href="http://golang-book.geekdb.org"/>
 <updated>2012-09-13T14:46:36+03:00</updated>
 <id>http://golang-book.geekdb.org</id>
 <author>
   <name>Vlad Shvedov</name>
   <email>init13@gmail.com</email>
 </author>

 
 <entry>
   <title>Глава 2 • Ваша первая программа</title>
   <link href="http://golang-book.geekdb.org/02/chapter-2"/>
   <updated>2012-09-02T00:00:00+03:00</updated>
   <id>hhttp://golang-book.geekdb.org/02/chapter-2</id>
   <content type="html">&lt;p&gt;Традиционно, первая программа, которую вы пишете на любом языке программирования, называется &lt;code&gt;“Hello World”&lt;/code&gt; — программа, которая просто выводит &lt;code&gt;Hello World&lt;/code&gt; в вашем терминале. Давайте напишем такую на Go.&lt;/p&gt;

&lt;p&gt;Сперва создайте новую папку, в которой можно сохранить нашу программу. Инсталлятор, который вы использовали в Главе 1, создал папку «Go» в вашей домашней директории. Создайте папку под именем &lt;code&gt;~/Go/src/golang-book/chapter2&lt;/code&gt; (где &lt;code&gt;~&lt;/code&gt; означает вашу домашнюю директорию). Из терминала это можно сделать, введя следующие команды:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
  mkdir Go/src/golang-book
  mkdir Go/src/golang-book/chapter2
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Используя ваш текстовый редактор, наберите следующее:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

// this is a comment

func main() {
    fmt.Println(&amp;quot;Hello World&amp;quot;)
  }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Убедитесь, что в вашем файле написано то же, что показано здесь, и сохраните его как main.go в папке, которую вы только что создали. Откройте новый терминал и наберите следующее:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
cd Go/src/golang-book/chapter2
go run main.go
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Вы должны увидеть в вашем терминале надпись Hello World. Команда go run берет последующие (разделенные пробелами) файлы, компилирует их в исполняемый файл, сохраненный во временной папке, и затем запускает программу. Если вы не видите надписи Hello World, возможно, вы допустили ошибку во время набора кода. Компилятор Go даст вам подсказки о том, где были сделаны ошибки. Как и большинство компиляторов, компилятор Go очень педантичен и нетерпим к ошибкам.&lt;/p&gt;

&lt;h2 id='____go'&gt;Как читать программу на Go&lt;/h2&gt;

&lt;p&gt;Рассмотрим эту программу более детально. Программы Go читаются сверху вниз, слева направо, как книга. Первая строка гласит:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Это называется «объявление пакета». Все программы Go должны начинаться с объявления пакета. Пакеты — это способ организации и повторного использования кода в Go. Есть два вида программ на Go: исполняемые файлы и библиотеки. Исполняемые приложения — это вид программ, которые можно запускать прямо из терминала (в Windows они имеют расширение .exe). Библиотеки представляют собой наборы кода, которые мы упаковываем вместе, чтобы использовать в других программах. Позже мы рассмотрим библиотеки более подробно, а сейчас просто не забудьте включить эту строку в любую программу, которую пишете.&lt;/p&gt;

&lt;p&gt;Следующая строка пустая. Компьютер представляет знак переноса строки специальным символом (или несколькими символами). Символы новой строки, пробелов и табуляции известны как пробелы (потому что вы не можете их видеть). Язык Go в основном не требователен к пробелам, мы используем их для того, чтобы сделать программы более удобными для чтения. Вы можете удалить эту строку, а программа будет вести себя точно так же.&lt;/p&gt;

&lt;p&gt;Дальше мы видим следующее:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;fmt&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;С помощью ключевого слова import мы добавляем код из других пакетов для использования в нашей программе. Пакет fmt (сокращение от слова format) реализует форматирование для ввода и вывода. Учитывая то, что мы только что узнали о пакетах, как думаете, что будет находиться в верхнем файле пакета fmt?&lt;/p&gt;

&lt;p&gt;Обратите внимание, что fmt выше заключен в двойные кавычки. Такое использование двойных кавычек, известно как «строковой литерал» (String Literal). В Go строки представляют собой последовательности символов (букв, цифр, знаков и т.д.) определенной длины. Строки описаны более подробно в следующей главе, а сейчас важно помнить, что за открывающим символом &amp;#8221; в конечном итоге должен следовать еще один символ &amp;#8220;, и все, что находится между ними, входит в строку. Сам символ &amp;#8221; не является частью строки.&lt;/p&gt;

&lt;p&gt;Строка, начинающаяся с //, называется комментарием. Комментарии игнорируются компилятором Go и нужны только для вас (или для того, кто столкнется с исходным кодом вашей программы). Go поддерживает два разных стиля комментариев: // комментарии, в которых весь текст между // и концом строки является частью комментария, и /* &lt;em&gt;/ комментарии, где все, что находится между&lt;/em&gt; * является частью комментария, и он может включать в себя несколько строк.&lt;/p&gt;

&lt;p&gt;После этого вы видите объявление функции:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
     fmt.Println(&amp;quot;Hello World&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Функции являются строительными элементами программ на Go. У функции есть точка входа, точка выхода ряд шагов, которые называются объявлениями, которые исполняются в определенном порядке. Все функции начинаются с ключевого слова func, за которым следует имя функции (в данном случае main), список из нуля или большего количества «параметров», заключенных в круглые скобки, опциональный возврат результата работы и «тело», заключенное в фигурные скобки. У этой функции нет параметров, она ничего не возвращает, и у нее есть только один оператор. Функция main вызывается при выполнении программы. Это особое название для функции, потому что она исполняется сразу после того как вы запускаете программу.&lt;/p&gt;

&lt;p&gt;Заключительной частью нашей программы является эта строка:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fmt.Println(&amp;quot;Hello World&amp;quot;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Этот выражение состоит из трех компонентов. Сперва мы обращаемся к другой функции внутри пакета fmt, которая называется &lt;code&gt;Println&lt;/code&gt; (это часть &lt;code&gt;fmt.Println&lt;/code&gt;, &lt;code&gt;Println&lt;/code&gt; означает «печать строки»). Затем мы создаем новую строку, который содержит Hello World и вызываем ее (еще модно сказать «выполняем») передавая строку как первый и единственный аргумент.&lt;/p&gt;

&lt;p&gt;На данный момент мы встретили много новых терминов и вы можете быть немного перегружены. Иногда бывает полезным не спеша вслух прочесть ваш код. Чтение программы, которую мы только что написали, может выглядеть так:&lt;/p&gt;

&lt;p&gt;Создаем новую исполняемую программу, которая ссылается на библиотеку fmt и содержит одну функцию, называемую main. У этой функции нет аргументов, она ничего не возвращает и выполняет следующее: обращается к функции &lt;code&gt;Println&lt;/code&gt;, содержащейся внутри пакета &lt;code&gt;fmt&lt;/code&gt;, вызывает ее, используя один аргумент — строку &lt;code&gt;Hello World&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;В этой программе функция &lt;code&gt;Println&lt;/code&gt; делает реальную работу. Вы можете узнать об этом больше, введя в терминале:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
  godoc fmt Println
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Среди прочего, вы увидите это:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Println formats using the default formats for its operands and writes to standard output. Spaces are always added between operands and a newline is appended. It returns the number of bytes written and any write error encountered.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Язык Go очень хорошо документирован, но эту документацию может быть трудно понять, если вы не были знакомы с языками программирования. Тем не менее, команда godoc очень полезна и ее неплохо запомнить на тот случай, если у вас возникают вопросы.&lt;/p&gt;

&lt;p&gt;Возвращаясь к функции: документация говорит вам, что функция &lt;code&gt;Println&lt;/code&gt; будет отправлять все, что вы ей передадите, на стандартный источник вывода (в нашем случае это консоль терминала). Эта функция — и есть то, благодаря чему отображается текст &lt;code&gt;Hello World&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;В следующей главе мы рассмотрим, как Go хранит и отображает вещи наподобие &lt;code&gt;Hello World&lt;/code&gt;, узнав о типах.&lt;/p&gt;

&lt;h2 id='id5'&gt;Задания&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Что такое прoбел?&lt;/li&gt;

&lt;li&gt;Что такое кoмментарий? Какими двумя способами можно записать комментарий?&lt;/li&gt;

&lt;li&gt;Наша программа начинается с &lt;code&gt;package main&lt;/code&gt;. С чего будут начинаться файлы в пакете &lt;code&gt;fmt&lt;/code&gt;?&lt;/li&gt;

&lt;li&gt;Мы использовали функцию &lt;code&gt;Println&lt;/code&gt;, определенную в пакете &lt;code&gt;fmt&lt;/code&gt;. Что нам необходимо сделать, если мы хотим использовать функцию &lt;code&gt;Exit&lt;/code&gt; из пакета &lt;code&gt;os&lt;/code&gt;?&lt;/li&gt;

&lt;li&gt;Измените нашу программу так, чтобы вместо печати &lt;code&gt;Hello World&lt;/code&gt; она вывела &lt;code&gt;Hello, my name is&lt;/code&gt; и следом ваше имя.&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Глава 1 - Приступим</title>
   <link href="http://golang-book.geekdb.org/01/chapter-1"/>
   <updated>2012-09-01T00:00:00+03:00</updated>
   <id>hhttp://golang-book.geekdb.org/01/chapter-1</id>
   <content type="html">&lt;p&gt;Программирование — это искусство, ремесло и наука о написании программ, которые определяют то, как компьютер будет работать. Эта книга научит вас писать программы на языке Go, разработанном компанией Google.&lt;/p&gt;

&lt;p&gt;Go — это язык общего назначения с обширными возможностями и понятным синтаксисом. Он доступен на множестве платформ, надежен, его библиотеки общего назначения хорошо документированы. Go сфокусирован на принципах грамотного планирования структуры приложения. Это идеальный первый язык программирования.&lt;/p&gt;

&lt;p&gt;Методы, которые мы используем при разработке программного обеспечения на Go (и на большинстве других языках программирования), достаточно прямолинейны:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;сбор технических требований&lt;/li&gt;
  &lt;li&gt;поиск решения&lt;/li&gt;
  &lt;li&gt;написание кода для внедрения решения&lt;/li&gt;
  &lt;li&gt;компиляция в исполняемый файл&lt;/li&gt;
  &lt;li&gt;запуск и тестирование, чтобы убедиться, что все работает&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Это итерационный процесс (что означает, что мы повторяем его много раз) с частичным перекрыванием шагов. Но, прежде чем написать нашу первую программу на Go, необходимо понять и освоить несколько концептуальных требований (если эта информация покажется вам очевидной, можете сразу переходить к &lt;a href='/02/chapter-2'&gt;Главе 2&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id='__'&gt;Файлы и директории&lt;/h2&gt;

&lt;p&gt;Файл — это коллекция данных, сохраненных в виде сущности с именем. Современные операционные системы (такие как Windows, Linux или Mac OS X) состоят из миллионов файлов, которые содержат множество типов информации: от текстовых документов до исполняемых файлов и файлов мультимедиа.&lt;/p&gt;

&lt;p&gt;Все файлы хранятся на компьютере похожим образом: у них есть имя, размер (измеряемый в байтах) и ассоциированный тип. Обычно тип файла обозначен его расширением — частью имени файла, идущей после последней точки. Например, файл с именем hello.txt имеет расширение txt, которое используется для обозначения текстовых данных.&lt;/p&gt;

&lt;p&gt;Директории (также называемые «папками») используются для того, чтобы группировать файлы. Они также могут содержать и другие директории (вложения). В Windows файлы и путь к папке (местоположение) представлены символом &lt;code&gt;\&lt;/code&gt;. Например: &lt;code&gt;C:\Users\john\example.txt&lt;/code&gt; &lt;code&gt;example.txt&lt;/code&gt; — это имя файла в папке john, которая, в свою очередь, находится в папке Users, расположенной на жестком диске C. В OSX и Linux путь к папкам и файлам представлен символом &lt;code&gt;/&lt;/code&gt;, например: &lt;code&gt;/Users/john/example.txt&lt;/code&gt;. В отличии от Windows, Mac OS X не определяет букву физического устройства (HDD) так жестко.&lt;/p&gt;

&lt;h2 id='id4'&gt;Терминал&lt;/h2&gt;

&lt;p&gt;Большинство действий, которые мы совершаем с помощью компьютера, происходят с использованием сложного графического пользовательского интерфейса (GUI). Мы используем клавиатуру, мышку, тачскрин для того, чтобы взаимодействовать с визуальными элементами, кнопками и другими типами управляющих элементов, которые видны на экране.&lt;/p&gt;

&lt;p&gt;Но так было не всегда. До того, как появился GUI, у нас был только терминал — простой текстовый интерфейс, который вместо визуальных образов использует директивы и команды. Так и происходило общение с компьютером.&lt;/p&gt;

&lt;p&gt;Может возникнуть ощущение, что терминал — это давно забытый реликт из прошлого. Но правда состоит в том, что до сих пор терминал является фундаментальным инструментом для большинства языков программирования. В этом плане Go ничем не отличается. Поэтому до того, как мы начнем писать программы на Go, нам необходимы базовые знания о том, как работает терминал.&lt;/p&gt;

&lt;h3 id='windows'&gt;Windows&lt;/h3&gt;

&lt;p&gt;В Windows терминал (также известный как командная строка) вызывается комбинацией клавиш &lt;code&gt;windows + r&lt;/code&gt; (зажмите клавишу &lt;code&gt;windows&lt;/code&gt; и затем нажмите &lt;code&gt;r&lt;/code&gt;) или вызовом программы &lt;code&gt;cmd.exe&lt;/code&gt;. Вы должны увидеть черное окно похожее на это:&lt;/p&gt;

&lt;p&gt;&lt;img alt='windows terminal' src='/assets/chapter01/10000201000004B0000003B4415431D2.png' /&gt;&lt;/p&gt;

&lt;p&gt;По умолчанию командная строка начинается с вашей домашней директории (в моем случае это C:\Users\caleb). Вы вызываете команды, набирая их и нажимая Enter. Попробуйте ввести команду dir, которая выводит список содержимого папки. Вы увидите что-то наподобие этого:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
C:\Users\caleb&amp;gt;dir
 Volume in drive C has no label.
 Volume Serial Number is B2F5-F125
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Следом будет идти список файлов и папок, содержащихся в вашей домашней директории. Вы можете изменять директории, используя команду cd. Например, у вас, наверняка, есть папка ‘Desktop’. Ее содержимое можно увидеть, набрав &lt;code&gt;cd Desktop&lt;/code&gt; и затем набрав &lt;code&gt;dir&lt;/code&gt;. Для того, чтобы вернуться в домашнюю директорию, можно использовать специальную директорию &lt;code&gt;..&lt;/code&gt;, например, &lt;code&gt;cd ..&lt;/code&gt;. Можно использовать еще множество команд, но для начала этого хватит.&lt;/p&gt;

&lt;h3 id='osx'&gt;OSX&lt;/h3&gt;

&lt;p&gt;В OSX в терминал можно зайти так: Finder → Программы → Утилиты → Терминал. Вы увидите окно наподобие этого:&lt;/p&gt;

&lt;p&gt;&lt;img alt='macosx terminal' src='/assets/chapter01/10000201000004B0000002A351BA6C59.png' /&gt;&lt;/p&gt;

&lt;p&gt;По умолчанию терминал запускается в вашей домашней директории (в моем случае это &lt;code&gt;/Users/caleb&lt;/code&gt;). Вы выполняете команды, набирая их и нажимая &lt;code&gt;Enter&lt;/code&gt;. Попробуйте ввести команду &lt;code&gt;ls&lt;/code&gt;, которая перечисляет содержимое директории. Вы увидите нечто вроде этого:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
caleb-min:~ caleb$ ls
Desktop      Downloads      Movies     Pictures
Documents    Library        Music      Public
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Это — файлы и папки, которые находятся в вашей домашней директории (в этом случае в ней нет файлов). Например, у вас, наверняка, есть папка &lt;code&gt;Desktop&lt;/code&gt;. Ее содержимое можно увидеть, введя &lt;code&gt;cd Desktop&lt;/code&gt; и затем введя &lt;code&gt;ls&lt;/code&gt;. Для того, чтобы вернуться в домашнюю директорию, можно использовать специальную директорию &lt;code&gt;..&lt;/code&gt;, например, cd &lt;code&gt;..&lt;/code&gt;. Можно использовать еще множество команд, но для начала этого хватит.&lt;/p&gt;

&lt;h2 id='_'&gt;Текстовые редакторы&lt;/h2&gt;

&lt;p&gt;Основным инструментом, который программисты используют для написания программ, является текстовый редактор. Текстовые редакторы похожи на программы обработки текста (Microsoft Word, Open Office, …), но, в отличие от таких программ, они не применяют форматирование текста (курсив, жирный шрифт и т.д.). Вместо этого они оперируют только простым текстом. И в OSX, и в Windows есть встроенные текстовые редакторы, но они очень ограниченные, поэтому я очень рекомендую установить что-то получше.&lt;/p&gt;

&lt;p&gt;На сайте книги &lt;a href='http://golang-book.geekdb.org/'&gt;golang-book.geekdb.org&lt;/a&gt; есть инсталлятор, который поможет установить такие программы. Этот инсталлятор установит инструментарий Go, настроит переменные окружения и установит текстовый редактор.&lt;/p&gt;

&lt;h3 id='windows'&gt;Windows&lt;/h3&gt;

&lt;p&gt;Для Windows будет установлен текстовый редактор Scite. Его можно запустить так: Пуск → Все программы→ Go → Scite. Вы увидите нечто похожее:&lt;/p&gt;

&lt;p&gt;&lt;img alt='windows editor' src='/assets/chapter01/10000201000004B00000038773C3C446.png' /&gt;&lt;/p&gt;

&lt;p&gt;В текстовом редакторе есть большое белое поле для ввода текста. Слева от этого поля вы можете увидеть ряд чисел. Внизу окна находится строка состояния, которая отображает информацию о файле и ваше текущее положение в нем (сейчас она сообщает, что мы находимся на строке 1, колонка 1, текст введен нормально, и мы используем перенос строки в windows-стиле).&lt;/p&gt;

&lt;p&gt;Вы можете открыть файл из меню Файл → Открыть, выбрав затем нужный файл. Сохранить файлы можно из меню Файл → Сохранить или Файл → Сохранить как.&lt;/p&gt;

&lt;p&gt;Так как вы работаете в текстовом редакторе, будет полезно запомнить некоторые сочетания клавиш. Вот самые распространенные:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + S&lt;/code&gt; – сохранить текущий файл&lt;/li&gt;

&lt;li&gt;&lt;code&gt;Ctrl + X&lt;/code&gt; – вырезать выделенный текст (удалить его и поместить в буфер обмена, чтобы использовать позже)&lt;/li&gt;

&lt;li&gt;&lt;code&gt;Ctrl + C&lt;/code&gt; – копировать выделенный текст&lt;/li&gt;

&lt;li&gt;&lt;code&gt;Ctrl + V&lt;/code&gt; – вставить текст из буфера обмена&lt;/li&gt;

&lt;li&gt;Используйте клавиши со стрелками для навигации, клавишу &lt;code&gt;Home&lt;/code&gt; — чтобы передвинуться на начало строки, клавишу &lt;code&gt;End&lt;/code&gt; — в конец строки&lt;/li&gt;

&lt;li&gt;Зажмите клавишу &lt;code&gt;Shift&lt;/code&gt; во время использования клавиш со стрелками (или &lt;code&gt;Home&lt;/code&gt; и &lt;code&gt;End&lt;/code&gt;), чтобы выделить текст без использования мышки&lt;/li&gt;

&lt;li&gt;&lt;code&gt;Ctrl + F&lt;/code&gt; – вызывает поиск внутри файла&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='osx'&gt;OSX&lt;/h3&gt;

&lt;p&gt;Для OSX инсталлятор установит текстовый редактор Text Wrangler:&lt;/p&gt;

&lt;p&gt;&lt;img alt='macosx editor' src='/assets/chapter01/10000201000004B000000447FA964939.png' /&gt;&lt;/p&gt;

&lt;p&gt;Как и в Scite для Windows, в редакторе Text Wrangler есть большое белое поле для ввода текста. Файлы можно открыть с помощью меню Файл → Открыть. Сохранить файлы можно с помощью меню Файл → Сохранить или Файл → Сохранить как. Вот список некоторых полезных сочетаний клавиш (Command это клавиша ⌘):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Command + S&lt;/code&gt; – сохранить текущий файл&lt;/li&gt;

&lt;li&gt;&lt;code&gt;Command + X&lt;/code&gt; – вырезать выделенный текст (удалить его и поместить в буфер обмена, чтобы вставить позже)&lt;/li&gt;

&lt;li&gt;&lt;code&gt;Command + C&lt;/code&gt; – копировать выделенный текст&lt;/li&gt;

&lt;li&gt;&lt;code&gt;Command + V&lt;/code&gt; – вставить текст из буфера обмена * Используйте клавиши со стрелками для навигации&lt;/li&gt;

&lt;li&gt;&lt;code&gt;Command + F&lt;/code&gt; – вызывает поиск внутри файла&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='_go'&gt;Инструментарий Go&lt;/h2&gt;

&lt;p&gt;Go — это компилируемый язык программирования. Это означает, что исходный код (код, который вы пишете) переводится на язык, который понятен вашему компьютеру. Поэтому, прежде чем мы начнем писать программу на Go, нам нужно установить Go компилятор.&lt;/p&gt;

&lt;p&gt;Инсталлятор автоматически настроит Go. Мы будем использовать &lt;code&gt;1.x.x&lt;/code&gt; (больше информации можно найти на странице &lt;a href='http://www.golang.org'&gt;golang.org&lt;/a&gt;). Убедимся, что все работает. Откройте терминал и введите следующее:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
go version
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Вы увидите следующее:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
go version go1.0.2
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ваша версия может немного отличаться. Если вы получаете ошибку о том, что команда не распознается, попробуйте перезапустить компьютер.&lt;/p&gt;

&lt;p&gt;Инструментарий Go состоит из нескольких разных команд и под-команд. Список этих команд можно увидеть, набрав:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
go help
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Как они используются, мы увидим в следующих главах.&lt;/p&gt;</content>
 </entry>
 

</feed>