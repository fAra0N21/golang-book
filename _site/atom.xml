<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Golang-book</title>
 <link href="http://golang-book.geekdb.org/atom.xml" rel="self"/>
 <link href="http://golang-book.geekdb.org"/>
 <updated>2012-09-07T23:59:09+03:00</updated>
 <id>http://golang-book.geekdb.org</id>
 <author>
   <name>Vlad Shvedov</name>
   <email>init13@gmail.com</email>
 </author>

 
 <entry>
   <title>Глава 1 - Приступим</title>
   <link href="http://golang-book.geekdb.org/01/chapter-1"/>
   <updated>2012-09-01T00:00:00+03:00</updated>
   <id>hhttp://golang-book.geekdb.org/01/chapter-1</id>
   <content type="html">&lt;p&gt;Программирование — это искусство, ремесло и наука о написании программ, которые определяют то, как компьютер будет работать. Эта книга научит вас писать программы на языке Go, разработанном компанией Google.&lt;/p&gt;

&lt;p&gt;Go — это язык общего назначения с обширными возможностями и понятным синтаксисом. Он доступен на множестве платформ, надежен, его библиотеки общего назначения хорошо документированы. Go сфокусирован на принципах грамотного планирования структуры приложения. Это идеальный первый язык программирования.&lt;/p&gt;

&lt;p&gt;Методы, которые мы используем при разработке программного обеспечения на Go (и на большинстве других языках программирования), достаточно прямолинейны:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;сбор технических требований&lt;/li&gt;
  &lt;li&gt;поиск решения&lt;/li&gt;
  &lt;li&gt;написание кода для внедрения решения&lt;/li&gt;
  &lt;li&gt;компиляция в исполняемый файл&lt;/li&gt;
  &lt;li&gt;запуск и тестирование, чтобы убедиться, что все работает&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Это итерационный процесс (что означает, что мы повторяем его много раз) с частичным перекрыванием шагов. Но, прежде чем написать нашу первую программу на Go, необходимо понять и освоить несколько концептуальных требований (если эта информация покажется вам очевидной, можете сразу переходить к Главе 2).&lt;/p&gt;

&lt;h2 id='__'&gt;Файлы и директории&lt;/h2&gt;

&lt;p&gt;Файл — это коллекция данных, сохраненных в виде сущности с именем. Современные операционные системы (такие как Windows, Linux или Mac OS X) состоят из миллионов файлов, которые содержат множество типов информации: от текстовых документов до исполняемых файлов и файлов мультимедиа.&lt;/p&gt;

&lt;p&gt;Все файлы хранятся на компьютере похожим образом: у них есть имя, размер (измеряемый в байтах) и ассоциированный тип. Обычно тип файла обозначен его расширением — частью имени файла, идущей после последней точки. Например, файл с именем hello.txt имеет расширение txt, которое используется для обозначения текстовых данных.&lt;/p&gt;

&lt;p&gt;Директории (также называемые «папками») используются для того, чтобы группировать файлы. Они также могут содержать и другие директории (вложения). В Windows файлы и путь к папке (местоположение) представлены символом &lt;code&gt;\&lt;/code&gt;. Например: &lt;code&gt;C:\Users\john\example.txt&lt;/code&gt; &lt;code&gt;example.txt&lt;/code&gt; — это имя файла в папке john, которая, в свою очередь, находится в папке Users, расположенной на жестком диске C. В OSX и Linux путь к папкам и файлам представлен символом &lt;code&gt;/&lt;/code&gt;, например: &lt;code&gt;/Users/john/example.txt&lt;/code&gt;. В отличии от Windows, Mac OS X не определяет букву физического устройства (HDD) так жестко.&lt;/p&gt;

&lt;h2 id='id1'&gt;Терминал&lt;/h2&gt;

&lt;p&gt;Большинство действий, которые мы совершаем с помощью компьютера, происходят с использованием сложного графического пользовательского интерфейса (GUI). Мы используем клавиатуру, мышку, тачскрин для того, чтобы взаимодействовать с визуальными элементами, кнопками и другими типами управляющих элементов, которые видны на экране.&lt;/p&gt;

&lt;p&gt;Но так было не всегда. До того, как появился GUI, у нас был только терминал — простой текстовый интерфейс, который вместо визуальных образов использует директивы и команды. Так и происходило общение с компьютером.&lt;/p&gt;

&lt;p&gt;Может возникнуть ощущение, что терминал — это давно забытый реликт из прошлого. Но правда состоит в том, что до сих пор терминал является фундаментальным инструментом для большинства языков программирования. В этом плане Go ничем не отличается. Поэтому до того, как мы начнем писать программы на Go, нам необходимы базовые знания о том, как работает терминал.&lt;/p&gt;

&lt;h3 id='windows'&gt;Windows&lt;/h3&gt;

&lt;p&gt;В Windows терминал (также известный как командная строка) вызывается комбинацией клавиш &lt;code&gt;windows + r&lt;/code&gt; (зажмите клавишу &lt;code&gt;windows&lt;/code&gt; и затем нажмите &lt;code&gt;r&lt;/code&gt;) или вызовом программы &lt;code&gt;cmd.exe&lt;/code&gt;. Вы должны увидеть черное окно похожее на это:&lt;/p&gt;

&lt;p&gt;&lt;img alt='windows terminal' src='/assets/chapter01/10000201000004B0000003B4415431D2.png' /&gt;&lt;/p&gt;

&lt;p&gt;По умолчанию командная строка начинается с вашей домашней директории (в моем случае это C:\Users\caleb). Вы вызываете команды, набирая их и нажимая Enter. Попробуйте ввести команду dir, которая выводит список содержимого папки. Вы увидите что-то наподобие этого:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
C:\Users\caleb&amp;gt;dir
 Volume in drive C has no label.
 Volume Serial Number is B2F5-F125
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Следом будет идти список файлов и папок, содержащихся в вашей домашней директории. Вы можете изменять директории, используя команду cd. Например, у вас, наверняка, есть папка ‘Desktop’. Ее содержимое можно увидеть, набрав &lt;code&gt;cd Desktop&lt;/code&gt; и затем набрав &lt;code&gt;dir&lt;/code&gt;. Для того, чтобы вернуться в домашнюю директорию, можно использовать специальную директорию &lt;code&gt;..&lt;/code&gt;, например, &lt;code&gt;cd ..&lt;/code&gt;. Можно использовать еще множество команд, но для начала этого хватит.&lt;/p&gt;

&lt;h3 id='osx'&gt;OSX&lt;/h3&gt;

&lt;p&gt;В OSX в терминал можно зайти так: Finder → Программы → Утилиты → Терминал. Вы увидите окно наподобие этого:&lt;/p&gt;

&lt;p&gt;&lt;img alt='macosx terminal' src='/assets/chapter01/10000201000004B0000002A351BA6C59.png' /&gt;&lt;/p&gt;

&lt;p&gt;По умолчанию терминал запускается в вашей домашней директории (в моем случае это &lt;code&gt;/Users/caleb&lt;/code&gt;). Вы выполняете команды, набирая их и нажимая &lt;code&gt;Enter&lt;/code&gt;. Попробуйте ввести команду &lt;code&gt;ls&lt;/code&gt;, которая перечисляет содержимое директории. Вы увидите нечто вроде этого:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
caleb-min:~ caleb$ ls
Desktop      Downloads      Movies     Pictures
Documents    Library        Music      Public
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Это — файлы и папки, которые находятся в вашей домашней директории (в этом случае в ней нет файлов). Например, у вас, наверняка, есть папка &lt;code&gt;Desktop&lt;/code&gt;. Ее содержимое можно увидеть, введя &lt;code&gt;cd Desktop&lt;/code&gt; и затем введя &lt;code&gt;ls&lt;/code&gt;. Для того, чтобы вернуться в домашнюю директорию, можно использовать специальную директорию &lt;code&gt;..&lt;/code&gt;, например, cd &lt;code&gt;..&lt;/code&gt;. Можно использовать еще множество команд, но для начала этого хватит.&lt;/p&gt;

&lt;h2 id='_'&gt;Текстовые редакторы&lt;/h2&gt;

&lt;p&gt;Основным инструментом, который программисты используют для написания программ, является текстовый редактор. Текстовые редакторы похожи на программы обработки текста (Microsoft Word, Open Office, …), но, в отличие от таких программ, они не применяют форматирование текста (курсив, жирный шрифт и т.д.). Вместо этого они оперируют только простым текстом. И в OSX, и в Windows есть встроенные текстовые редакторы, но они очень ограниченные, поэтому я очень рекомендую установить что-то получше.&lt;/p&gt;

&lt;p&gt;На сайте книги &lt;a href='http://golang-book.geekdb.org/'&gt;golang-book.geekdb.org&lt;/a&gt; есть инсталлятор, который поможет установить такие программы. Этот инсталлятор установит инструментарий Go, настроит переменные окружения и установит текстовый редактор.&lt;/p&gt;

&lt;h3 id='windows'&gt;Windows&lt;/h3&gt;

&lt;p&gt;Для Windows будет установлен текстовый редактор Scite. Его можно запустить так: Пуск → Все программы→ Go → Scite. Вы увидите нечто похожее:&lt;/p&gt;

&lt;p&gt;&lt;img alt='windows editor' src='/assets/chapter01/10000201000004B00000038773C3C446.png' /&gt;&lt;/p&gt;

&lt;p&gt;В текстовом редакторе есть большое белое поле для ввода текста. Слева от этого поля вы можете увидеть ряд чисел. Внизу окна находится строка состояния, которая отображает информацию о файле и ваше текущее положение в нем (сейчас она сообщает, что мы находимся на строке 1, колонка 1, текст введен нормально, и мы используем перенос строки в windows-стиле).&lt;/p&gt;

&lt;p&gt;Вы можете открыть файл из меню Файл → Открыть, выбрав затем нужный файл. Сохранить файлы можно из меню Файл → Сохранить или Файл → Сохранить как.&lt;/p&gt;

&lt;p&gt;Так как вы работаете в текстовом редакторе, будет полезно запомнить некоторые сочетания клавиш. Вот самые распространенные:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + S&lt;/code&gt; – сохранить текущий файл&lt;/li&gt;

&lt;li&gt;&lt;code&gt;Ctrl + X&lt;/code&gt; – вырезать выделенный текст (удалить его и поместить в буфер обмена, чтобы использовать позже)&lt;/li&gt;

&lt;li&gt;&lt;code&gt;Ctrl + C&lt;/code&gt; – копировать выделенный текст&lt;/li&gt;

&lt;li&gt;&lt;code&gt;Ctrl + V&lt;/code&gt; – вставить текст из буфера обмена&lt;/li&gt;

&lt;li&gt;Используйте клавиши со стрелками для навигации, клавишу &lt;code&gt;Home&lt;/code&gt; — чтобы передвинуться на начало строки, клавишу &lt;code&gt;End&lt;/code&gt; — в конец строки&lt;/li&gt;

&lt;li&gt;Зажмите клавишу &lt;code&gt;Shift&lt;/code&gt; во время использования клавиш со стрелками (или &lt;code&gt;Home&lt;/code&gt; и &lt;code&gt;End&lt;/code&gt;), чтобы выделить текст без использования мышки&lt;/li&gt;

&lt;li&gt;&lt;code&gt;Ctrl + F&lt;/code&gt; – вызывает поиск внутри файла&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='osx'&gt;OSX&lt;/h3&gt;

&lt;p&gt;Для OSX инсталлятор установит текстовый редактор Text Wrangler:&lt;/p&gt;

&lt;p&gt;&lt;img alt='macosx editor' src='/assets/chapter01/10000201000004B000000447FA964939.png' /&gt;&lt;/p&gt;

&lt;p&gt;Как и в Scite для Windows, в редакторе Text Wrangler есть большое белое поле для ввода текста. Файлы можно открыть с помощью меню Файл → Открыть. Сохранить файлы можно с помощью меню Файл → Сохранить или Файл → Сохранить как. Вот список некоторых полезных сочетаний клавиш (Command это клавиша ⌘):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Command + S&lt;/code&gt; – сохранить текущий файл&lt;/li&gt;

&lt;li&gt;&lt;code&gt;Command + X&lt;/code&gt; – вырезать выделенный текст (удалить его и поместить в буфер обмена, чтобы вставить позже)&lt;/li&gt;

&lt;li&gt;&lt;code&gt;Command + C&lt;/code&gt; – копировать выделенный текст&lt;/li&gt;

&lt;li&gt;&lt;code&gt;Command + V&lt;/code&gt; – вставить текст из буфера обмена * Используйте клавиши со стрелками для навигации&lt;/li&gt;

&lt;li&gt;&lt;code&gt;Command + F&lt;/code&gt; – вызывает поиск внутри файла&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='_go'&gt;Инструментарий Go&lt;/h2&gt;

&lt;p&gt;Go — это компилируемый язык программирования. Это означает, что исходный код (код, который вы пишете) переводится на язык, который понятен вашему компьютеру. Поэтому, прежде чем мы начнем писать программу на Go, нам нужно установить Go компилятор.&lt;/p&gt;

&lt;p&gt;Инсталлятор автоматически настроит Go. Мы будем использовать первую версию языка (больше информации можно найти на странице &lt;a href='http://www.golang.org'&gt;golang.org&lt;/a&gt;). Убедимся, что все работает. Откройте терминал и введите следующее:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
go version
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Вы увидите следующее:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
go version go1.0.2
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ваша версия может немного отличаться. Если вы получаете ошибку о том, что команда не распознается, попробуйте перезапустить компьютер.&lt;/p&gt;

&lt;p&gt;Инструментарий Go состоит из нескольких разных команд и под-команд. Список этих команд можно увидеть, набрав:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
go help
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Как они используются, мы увидим в следующих главах.&lt;/p&gt;</content>
 </entry>
 

</feed>